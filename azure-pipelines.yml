trigger:
- azdo-pipelines

resources:
- repo: self

pool:
   vmImage: 'ubuntu-latest'

variables:
  imageRepository: 'manager'
  containerRegistry: '$(CONTAINER_REGISTRY)'
  tag: '$(Build.BuildId)'
  MAJOR_VERSION: 0
  MINOR_VERSION: 0
  PATCH_VERSION: $(Build.BuildId)
  GOROOT: '/usr/local/go1.13' # Go installation path
  #GOPATH: '$(System.DefaultWorkingDirectory)/gopath' # Go workspace path
  #GOBIN:  '$(GOPATH)/bin' # Go binaries path
  MODULE_PATH: '$(System.DefaultWorkingDirectory)/src/$(Build.Repository.Name)' # Path to the module's code
  IMAGE_NAME: 'candidate/k8s/azure-service-operator'
  KUBEBUILDER_ASSETS: $(go env GOPATH)/bin
  # CONTAINER_REGISTRY:     - set this value in Azure Devops variables - Name of Release ACR Service Connection
  # AZURE_SUBSCRIPTION_ID   - set this value in Azure Devops variables
  # AZURE_TENANT_ID:        - set this value in Azure Devops variables
  # AZURE_CLIENT_ID:        - set this value in Azure Devops variables
  # AZURE_CLIENT_SECRET:    - set this value in Azure Devops variables
  # OPERATOR_NAMESPACE      - set this value in Azure Devops variables
  # REQUEUE_AFTER:          - set this value in Azure Devops variables
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    lfs: "true"

  - task: GoTool@0
    displayName: Get Go 1.13.7
    inputs:
      version: '1.13.7'

  - task: Go@0
    displayName: Get Go dependencies
    inputs:
      command: 'get'
      arguments: '-d'
      workingDirectory: '$(System.DefaultWorkingDirectory)'

  - task: Bash@3
    displayName: Install kubebuilder, kustomize and test dependencies
    inputs:
      targetType: 'inline'
      script: |
        set -x
        mkdir -p $(go env GOPATH)/bin
        go env
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        curl -sL https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C $(go env GOPATH)/bin
        mv $(go env GOPATH)/bin/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder
        export PATH=$PATH:/usr/local/kubebuilder/bin
        echo '##vso[task.prependpath]/usr/local/kubebuilder/bin'
        # download kustomize
        curl -o $(go env GOPATH)/bin/kustomize -sL https://go.kubebuilder.io/kustomize/${os}/${arch}
        # set permission
        chmod a+x $(go env GOPATH)/bin/*
        export PATH=$PATH:$(go env GOPATH)/bin
        echo '##vso[task.prependpath]$(go env GOPATH)/bin'
        which kustomize
        kustomize  version
        go mod download
        make install-test-dependencies
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'make validate-copyright-headers'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Validate Copyright Headers'
      
  - script: |
      set -e
      export PATH=$PATH:$(go env GOPATH)/bin
      GO111MODULE="on" go get sigs.k8s.io/kind@v0.7.0
      kind create cluster
      export KUBECONFIG=$(kind get kubeconfig-path --name="kind")
      kubectl cluster-info
      make install
      # Remove after
      export BUILD_TAGS=resourcegroup
      echo $(AZURE_TENANT_ID)
      export AZURE_TENANT_ID=$(AZURE_TENANT_ID)
      make test-integration-controllers
    displayName: Run tests on a Kind Cluster
    env:
      GO111MODULE: on
      AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
      AZURE_TENANT_ID: $(AZURE_TENANT_ID)
      AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
      AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
      REQUEUE_AFTER: $(REQUEUE_AFTER)
      KUBEBUILDER_ASSETS: $(go env GOPATH)/bin
      BUILD_ID: $(Build.BuildId)
    workingDirectory: '$(System.DefaultWorkingDirectory)'

  - bash: |
      export PATH=$PATH:$(go env GOPATH)/bin
      make test-process-coverage
    displayName: Render Coverage Reports
    continueOnError: true
    workingDirectory: '$(System.DefaultWorkingDirectory)'

  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testRunner: JUnit
      testResultsFiles: $(System.DefaultWorkingDirectory)/reports/*-report.xml
    
  - task: PublishCodeCoverageResults@1
    displayName: Publish Codecoverage results
    inputs:
      codeCoverageTool: Cobertura 
      summaryFileLocation: $(System.DefaultWorkingDirectory)/reports/merged-coverage.xml
  
  - task: PublishBuildArtifacts@1
    displayName: Publish test reports
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/reports'
      artifactName: reports
  
  - task: AzureCLI@2
    displayName: Test - Cleanup Azure Resources
    inputs:
      azureSubscription: 'tpark-jananiv-azureserviceoperators(4ef44fef-c51d-4d7c-a6ff-8635c02848b1)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'make test-cleanup-azure-resources'

  - script: docker build -t $(IMAGE_NAME) .
    displayName: Docker build
    workingDirectory: '$(System.DefaultWorkingDirectory)'

  - task: Kubernetes@1
    displayName: Deploy to AKS - Fetch kubeconfig
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'ASO-AKS'
      namespace: $(OPERATOR_NAMESPACE)
      command: 'login'
      checkLatest: true

  - script: |
      kubectl create namespace cert-manager
      kubectl label namespace cert-manager cert-manager.io/disable-validation=true
      kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.12.0/cert-manager.yaml
    displayName: Deploy to AKS - Install Cert Manager

  - task: HelmInstaller@1
    displayName: Deploy to AKS - Install latest Helm
    inputs:
      helmVersionToInstall: 'latest'
  
  - task: Bash@3
    displayName: Replace image repository in values.yaml
    inputs:
      targetType: 'inline'
      script: |
        IMG="$(IMAGE_NAME):$(MAJOR_VERSION).$(MINOR_VERSION).$(PATCH_VERSION)"
        echo $(IMG)
        sed -i -e 's/azure-service-operator:latest/azure-service-operator:$(IMG)/' charts/azure-service-operator/values.yaml

  - script: |
      helm package charts/azure-service-operator -d ./charts
      helm repo index charts
    displayName: Deploy to AKS - Helm package

  - task: KubernetesManifest@0
    displayName: Deploy to AKS - Bake Helm manifests
    name: bake
    inputs:
      action: bake
      namespace: 'default'
      helmChart: charts/azure-service-operator-0.1.0.tgz
      overrides: |
        image.repository:$(containerRegistry)/$(IMAGE_NAME)

  - task: KubernetesManifest@0
    displayName: Deploy to AKS - Helm deploy
    inputs:
      action: 'deploy'
      kubernetesServiceConnection: 'ASO-AKS'
      namespace: $(OPERATOR_NAMESPACE)
      manifests: '$(bake.manifestsBundle)'

 # - task: HelmDeploy@0
 #   inputs:
 #     connectionType: 'Kubernetes Service Connection'
 #     kubernetesServiceConnection: 'ASO-AKS'
 #     namespace: '$(OPERATOR_NAMESPACE)'
 #     command: 'upgrade'
 #     chartType: 'FilePath'
 #     chartPath: 'charts/azure-service-operator-0.1.0.tgz'
 #     releaseName: 'aso'
 #     overrideValues: 'azureSubscriptionID=$(AZURE_SUBSCRIPTION_ID), azureTenantID=$(AZURE_TENANT_ID), azureClientID=$(AZURE_CLIENT_ID), azureClientSecret=$(AZURE_CLIENT_SECRET), namespace=$(OPERATOR_NAMESPACE)'
 #     recreate: true
 #     force: true
 #     arguments: '--install'
  
  ## TODO: Add a Health check task to ensure operator deployed to AKS works
  ## TODO: Delete Helm deployment 

  - task: Docker@2
    #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Login to ACR
    inputs:
      command: login
      containerRegistry: $(CONTAINER_REGISTRY)

  - task: Docker@2
    #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Build and Push Docker Image $(IMAGE_NAME)
    inputs:
      command: buildAndPush
      containerRegistry: $(CONTAINER_REGISTRY)
      repository: $(IMAGE_NAME)
      Dockerfile: "$(System.DefaultWorkingDirectory)/Dockerfile"    
      buildContext: $(System.DefaultWorkingDirectory)
      tags: |
        latest
        $(MAJOR_VERSION).$(MINOR_VERSION).$(PATCH_VERSION)

  - script: |
      echo "updating kustomize image patch file for manager resource"
      echo $(IMAGE_NAME)
      IMG="$(IMAGE_NAME):$(MAJOR_VERSION).$(MINOR_VERSION).$(PATCH_VERSION)"
      echo $(IMG)
      sed -i -e 's@controller:latest@'${IMG}'@g' ./config/default/manager_image_patch.yaml
      kustomize build config/default > $(Build.ArtifactStagingDirectory)/setup.yaml
      set -x
      echo $IMG > $(Build.ArtifactStagingDirectory)/azure-service-operator.txt
      cp charts/azure-service-operator-0.1.0.tgz $(Build.ArtifactStagingDirectory)
    continueOnError: 'false'
    displayName: Package artifacts (image, setup.yaml and helm charts) for release
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 

  - task: PublishBuildArtifacts@1
    #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: drop
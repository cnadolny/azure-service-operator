trigger:
- azdo-pipelines

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  imageRepository: 'jskulavikaso'
  containerRegistry: 'skulavik.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'skulavik7b16-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # Azure Service connection
  azureConnection: 'bca5fcbc-7592-4188-92fb-eedf3ac4a8b1'

stages:
- stage: Prerequisites
  displayName: Install Prerequisites
  jobs:
  - job:
    steps:
    - script: |
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/    
        export KUBEBUILDER_ASSETS=/tmp/kubebuilder_2.3.1_${os}_${arch}
        export PATH=$PATH:/usr/local/kubebuilder/bin
      displayName: Install kubebuilder
- stage: BinaryBuild
  displayName: Build Binary
  jobs:
  - job:
    steps:
    - task: GoTool@0
      inputs:
        version: '1.13.7'
      displayName: Get Go 1.13.7
    - task: Go@0
      inputs:
         command: 'get'
         arguments: '-d'
         workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Get Go dependencies
    - task: Go@0
      inputs:
       command: 'get'
       arguments: sigs.k8s.io/controller-tools/cmd/controller-gen@v0.2.0
       workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Get controller-gen
    - script: make generate
      displayName: Generate controllers
    - task: Go@0
      inputs:
        command: 'test'
        arguments: '-v -tags "$(Build.BuildId)" -coverprofile=coverage-unit.txt -covermode count -parallel 4 -timeout 10m'
      displayName: Run unit tests
    - task: Go@0
      inputs:
        command: 'build'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Compile manager binary
    - task: CopyFiles@2
      inputs:
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: drop

- stage: Install
  displayName: Login to cluster
  dependsOn: BinaryBuild
  jobs:
  - job: Install
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'skulavik-k8s'
        namespace: 'azureoperator-system'
        command: 'login'
        checkLatest: true
      # Install ASO controllers
    - script: make install
- stage: DockerBuild
  displayName: Docker build
  jobs:  
  - job: DockerBuild
    displayName: Docker Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push Docker image
      inputs:
        containerRegistry: 'Skulavik ACR'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'
    - upload: charts
      artifact: charts

- stage: BakeAndDeploy
  displayName: Bake and deploy CRDs
  jobs:
  - job:
    displayName: Package, bake, and deploy to AKS
    steps:
    - task: helm@1
      displayName: Package Helm charts
      inputs:
        subCommand: 'package'
        arguments: '--dependency-update /home/vsts/work/1/s/charts/azure-service-operator'
    - task: KubernetesManifest@0
      displayName: Bake manifests
      name: bake
      inputs:
        action: bake
        helmChart: $(Pipeline.Workspace)/azure-service-operator-0.1.0.tgz
        overrides: |
          image.repository:$(containerRegistry)/$(imageRepository)
    - task: KubernetesManifest@0
      displayName: Deploy CRDs
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'skulavik-k8s'
        namespace: 'azureoperator-system'
        manifests: '$(bake.manifestsBundle)'

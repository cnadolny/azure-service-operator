# Deploy to Kubernetes - Review app with Azure DevSpaces
# Build and push image to Azure Container Registry; Deploy to Azure Kuberentes Services and setup Review App with Azure DevSpaces
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- azdo-pipelines

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '78b80566-6bc2-4d70-b159-dd4b84e59497'
  imageRepository: 'jskulavikaso'
  containerRegistry: 'skulavik.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'skulavik7b16-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # Azure Service connection
  azureConnection: 'bca5fcbc-7592-4188-92fb-eedf3ac4a8b1'
  
  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: '$(system.pullRequest.sourceBranch)'

stages:
- stage: Prerequisites
  displayName: Install Prerequisites
  jobs:
  - job:
    steps:
    - script: |
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/    
        export KUBEBUILDER_ASSETS=/tmp/kubebuilder_2.3.1_${os}_${arch}
        export PATH=$PATH:/usr/local/kubebuilder/bin
      displayName: Install kubebuilder
- stage: BinaryBuild
  displayName: Build Binary
  jobs:
  - job:
    steps:
    - task: GoTool@0
      inputs:
        version: '1.13.7'
      displayName: Get Go 1.13.7
    - task: Go@0
      inputs:
         command: 'get'
         arguments: '-d'
         workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Get Go dependencies
    - task: Go@0
      inputs:
       command: 'get'
       arguments: sigs.k8s.io/controller-tools/cmd/controller-gen@v0.2.0
       workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Get controller-gen
    - script: make generate
      displayName: Generate controllers
    # - task: Go@0
    #   inputs:
    #     customCommand: controller-gen crd:trivialVersions=true rbac:roleName=manager-role webhook paths="./..." output:crd:artifacts:config=config/crd/bases
    #     workingDirectory: '$(System.DefaultWorkingDirectory)'
    #   displayName: Generate manifests
    # - task: Go@0
    #   inputs:
    #     customCommand: controller-gen object:headerFile=./hack/boilerplate.go.txt paths=./api/...
    #     workingDirectory: '$(System.DefaultWorkingDirectory)'
    #   displayName: Generate CRDs
    - task: Go@0
      inputs:
        command: 'test'
        arguments: '-v -tags "$(Build.BuildId)" -coverprofile=coverage-unit.txt -covermode count -parallel 4 -timeout 10m'
      displayName: Run unit tests
    - task: Go@0
      inputs:
        command: 'build'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Compile binary
    - task: CopyFiles@2
      inputs:
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: drop
- stage: DockerBuild
  displayName: Docker build
  jobs:  
  - job: DockerBuild
    displayName: Docker Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - upload: charts
      artifact: charts

- stage: Deploy
  displayName: Deploy
  dependsOn: DockerBuild

  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'jskulavikazureserviceoperator-1296.aso-dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: helm@1
            inputs:
              subCommand: 'package'
              arguments: '--dependency-update $(Pipeline.Workspace)/charts/azure-service-operator'
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              kubernetesServiceConnection: 'skulavik-k8s'
              namespace: 'aso-dev'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'
          - task: KubernetesManifest@0
            displayName: Bake manifests
            name: bake
            inputs:
              action: bake
              # helmChart: $(Pipeline.Workspace)/azure-service-operator-0.1.0.tgz
              helmChart: /home/vsts/work/1/s/azure-service-operator-0.1.0.tgz
              overrides: |
                image.repository:$(containerRegistry)/$(imageRepository)
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'skulavik-k8s'
              namespace: 'aso-dev'
              manifests: '$(bake.manifestsBundle)'
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'
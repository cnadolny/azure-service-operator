trigger:
- azdo-pipelines

resources:
- repo: self

variables:
  imageRepository: 'jskulavikaso'
  containerRegistry: 'skulavik.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'skulavik7b16-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # Azure Service connection
  azureConnection: 'bca5fcbc-7592-4188-92fb-eedf3ac4a8b1'

stages:

# - stage: Prerequisites
#   displayName: Install Prerequisites
#   jobs:
#   - job:
#     steps:
#     - script: |
#         os=$(go env GOOS)
#         arch=$(go env GOARCH)
#         curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/    
#         export KUBEBUILDER_ASSETS=/tmp/kubebuilder_2.3.1_${os}_${arch}
#         export PATH=$PATH:/usr/local/kubebuilder/bin
#       displayName: Install kubebuilder
# - stage: BinaryBuild
#   displayName: Build Binary
#   jobs:
#   - job:
#     steps:
#     - task: GoTool@0
#       inputs:
#         version: '1.13.7'
#       displayName: Get Go 1.13.7
#     - task: Go@0
#       inputs:
#          command: 'get'
#          arguments: '-d'
#          workingDirectory: '$(System.DefaultWorkingDirectory)'
#       displayName: Get Go dependencies
#     - task: Go@0
#       inputs:
#        command: 'get'
#        arguments: sigs.k8s.io/controller-tools/cmd/controller-gen@v0.2.0
#        workingDirectory: '$(System.DefaultWorkingDirectory)'
#       displayName: Get controller-gen
#     - script: make generate
#       displayName: Generate controllers
#     - task: Go@0
#       inputs:
#         command: 'test'
#         arguments: '-v -tags "$(Build.BuildId)" -coverprofile=coverage-unit.txt -covermode count -parallel 4 -timeout 10m'
#       displayName: Run unit tests
#     - task: Go@0
#       inputs:
#         command: 'build'
#         workingDirectory: '$(System.DefaultWorkingDirectory)'
#       displayName: Compile manager binary
#     - task: CopyFiles@2
#       inputs:
#         TargetFolder: '$(Build.ArtifactStagingDirectory)'
#     - task: PublishBuildArtifacts@1
#       inputs:
#         artifactName: drop

- stage: TargetAKS
  jobs:
  - job:
    steps:
    # Get the kubeconfig for the AKS cluster we using
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'skulavik-k8s'
        namespace: 'azureoperator-system'
        command: 'login'
        checkLatest: true
    
    
      env:
        AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    - bash: |
        echo $AZURE_CLIENT_SECRET
        
        sed 's/AZURE_CLIENT_ID/'$AZURE_CLIENT_ID'/' devops/Dockerfile > outdock
        sed 's/AZURE_CLIENT_SECRET/'-RTz7gW=Us5]x.zl4QwiAbjiI4=S9rp0'/' outdock > outdock1
        sed 's/AZURE_TENANT_ID/'$AZURE_TENANT_ID'/' outdock1 > outdock2
        
        cat outdock2

    # - task: Docker@2
    #   displayName: Build and push Docker image
    #   inputs:
    #     containerRegistry: 'Skulavik ACR'
    #     repository: '$(imageRepository)'
    #     command: 'buildAndPush'
    #     Dockerfile: '**/devops/Dockerfile'
    #     tags: '$(tag)'
    # - publish: charts
    #   artifact: charts


# - stage: Install
#   displayName: Login to cluster
#   dependsOn: BinaryBuild
#   jobs:
#   - job: Install
#     steps:
#       # Install the CRDs
#     - script: make install

- stage: BakeAndDeploy
  displayName: Bake and deploy CRDs
  jobs:
  - job:
    displayName: Package, bake, and deploy to AKS
    steps:
    - task: HelmInstaller@1
      displayName: Install latest Helm
      inputs:
        helmVersionToInstall: 'latest'
    - script: |
       helm package charts/azure-service-operator -d ./charts
       helm repo index charts
    - task: KubernetesManifest@0
      displayName: Bake manifests
      name: bake
      inputs:
        action: bake
        helmChart: charts/azure-service-operator-0.1.0.tgz
        overrides: |
          image.repository:$(containerRegistry)/$(imageRepository)
    - task: KubernetesManifest@0
      displayName: Deploy CRDs
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'skulavik-k8s'
        namespace: 'azureoperator-system'
        manifests: '$(bake.manifestsBundle)'

# TODO:  These tests are still a WIP, uncomment once complete
# - stage: IntegrationTest
#   displayName: Test controllers
#   jobs:
#   - job:
#     displayName: Test controllers
#     steps:
#     - bash: make test-integration-controllers
#       env:
#         AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
#         AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
#         AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
#         AZURE_OPERATOR_KEYVAULT: $(AZURE_OPERATOR_KEYVAULT)
#         AZURE_TENANT_ID: $(AZURE_TENANT_ID)
#   - job:
#     displayName: Test managers
#     steps:
#     - bash: make test-integration-managers
#       env:
#         AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
#         AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
#         AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
#         AZURE_OPERATOR_KEYVAULT: $(AZURE_OPERATOR_KEYVAULT)
#         AZURE_TENANT_ID: $(AZURE_TENANT_ID)

# Clean up the resources we created during integration testing
- stage: AzResouceCleanup
  displayName: Clean up test resources
  jobs:
  - job: ResourceCleanup
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'tpark-seusher-jaskulav(d2d51f36-8155-4276-bca3-038818d7a7d8)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'make test-cleanup-azure-resources'
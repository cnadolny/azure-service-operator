trigger:
- azdo-pipelines

resources:
- repo: self

variables:
  imageRepository: 'manager'
  containerRegistry: 'asoazdo.azurecr.io'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # Azure Service connection
  azureConnection: 'bca5fcbc-7592-4188-92fb-eedf3ac4a8b1'

stages:
- stage: Build
  jobs:
  - job:
    steps:
    # - task: GoTool@0
    #   displayName: Get Go 1.13.7
    #   inputs:
    #     version: '1.13.7'

    # - task: Go@0
    #   displayName: Get Go dependencies
    #   inputs:
    #     command: 'get'
    #     arguments: '-d'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)'

    # - bash: |
    #     os=$(go env GOOS)
    #     arch=$(go env GOARCH)
    #     curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/    
    #     export KUBEBUILDER_ASSETS=/tmp/kubebuilder_2.3.1_${os}_${arch}
    #     export PATH=$PATH:/usr/local/kubebuilder/bin
    #   displayName: Install kubebuilder
      
    # - bash: make manager
    #   displayName: Build manager binary
      
    # - task: Kubernetes@1
    #   displayName: Fetch kubeconfig
    #   inputs:
    #     connectionType: 'Kubernetes Service Connection'
    #     kubernetesServiceEndpoint: 'ASO-AKS'
    #     namespace: 'azureoperator-system'
    #     command: 'login'
    #     checkLatest: true
      
      # Inject envars from pipeline variables
    - bash: |
        echo $AZURE_CLIENT_SECRET\n \
        $AZURE_TENANT_ID\n \
        $AZURE_SUBSCRIPTION_ID\n \
        $AZURE_OPERATOR_KEYVAULT\n


        sed 's/\[AZURE_CLIENT_ID\]/'$AZURE_CLIENT_ID'/' devops/Dockerfile > outdock

        sed 's/\[AZURE_TENANT_ID\]/'$AZURE_TENANT_ID'/' outdock > outdock2
        sed 's/\[AZURE_SUBSCRIPTION_ID\]/'$AZURE_SUBSCRIPTION_ID'/' outdock2 > outdock3
        sed 's/\[AZURE_OPERATOR_KEYVAULT\]/'$AZURE_OPERATOR_KEYVAULT'/' outdock3 > outdock4
        
        cat outdock4
      env:
        AZURE_CLIENT_SECRET: $(AZURE_SP_SECRET)

    - task: Docker@2
      displayName: Build and push Docker image
      inputs:
        containerRegistry: 'ASO-ACR'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: 'outdockx'
        buildContext: '$(System.DefaultWorkingDirectory)'
        tags: '$(tag)'

- stage: Deploy
  jobs:
  - job: InstallControllers
    displayName: Install Controllers
    steps:
    - task: Kubernetes@1
      displayName: Fetch kubeconfig
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'ASO-AKS'
        namespace: 'azureoperator-system'
        command: 'login'
        checkLatest: true
    - bash: make install
  - job:
    displayName: Deploy charts
    steps:
    - task: HelmInstaller@1
      displayName: Install latest Helm
      inputs:
        helmVersionToInstall: 'latest'
    - script: |
       helm package charts/azure-service-operator -d ./charts
       helm repo index charts
    - task: KubernetesManifest@0
      displayName: Bake manifests
      name: bake
      inputs:
        action: bake
        helmChart: charts/azure-service-operator-0.1.0.tgz
        overrides: |
          image.repository:$(containerRegistry)/$(imageRepository)
    - task: KubernetesManifest@0
      displayName: Helm deploy
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'ASO-AKS'
        namespace: 'azureoperator-system'
        manifests: '$(bake.manifestsBundle)'

- stage: Test
  jobs:
  - job:
    steps:
    - task: Kubernetes@1
      displayName: Fetch kubeconfig
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'ASO-AKS'
        namespace: 'azureoperator-system'
        command: 'login'
        checkLatest: true

    - bash: make test-integration-controllers
      displayName: Test controllers
      continueOnError: true
      env:
        AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
        AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
        AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
        AZURE_OPERATOR_KEYVAULT: $(AZURE_OPERATOR_KEYVAULT)
        AZURE_TENANT_ID: $(AZURE_TENANT_ID)

    - bash: make test-integration-managers
      displayName: Test managers
      continueOnError: true
      env:
        AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
        AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
        AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
        AZURE_OPERATOR_KEYVAULT: $(AZURE_OPERATOR_KEYVAULT)
        AZURE_TENANT_ID: $(AZURE_TENANT_ID)

- stage: Clean
  jobs:
  - job: ResourceCleanup
    continueOnError: true
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'tpark-seusher-jaskulav(d2d51f36-8155-4276-bca3-038818d7a7d8)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'make test-cleanup-azure-resources'
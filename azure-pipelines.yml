trigger:
- azdo-pipelines

resources:
- repo: self

variables:
  imageRepository: 'manager'
  containerRegistry: '$(REGISTRY)'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'



stages:
- stage: Build
  jobs:
  - job:
    steps:
    - task: GoTool@0
      displayName: Get Go 1.13.7
      inputs:
        version: '1.13.7'

    - task: Go@0
      displayName: Go Get
      inputs:
        command: 'get'
        arguments: '-d'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - bash: |
        set -x
        go env
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C $(go env GOPATH)/bin
        mv $(go env GOPATH)/bin/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder

        export PATH=$PATH:/usr/local/kubebuilder/bin
        echo '##vso[task.prependpath]/usr/local/kubebuilder/bin'

        make install-test-dependencies
      displayName: Install kubebuilder and test dependencies
      
    - bash: make manager
      displayName: Build manager binary
      
    - task: Kubernetes@1
      displayName: Fetch kubeconfig
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'ASO-AKS'
        namespace: 'azureoperator-system'
        command: 'login'
        checkLatest: true

    - task: Docker@2
      displayName: Build Docker image
      inputs:
        command: 'build'
        Dockerfile: 'devops/Dockerfile'
        tags: '$(tag)'
        arguments: '--build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_SP_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg AZURE_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID) --build-arg CLUSTERNAME=$(CLUSTERNAME) --build-arg RESOURCEGROUP=$(RESOURCEGROUP)'
    
    - task: Docker@2
      displayName: Push Docker image
      inputs:
        containerRegistry: 'ASO-ACR'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'
        
- stage: Deploy
  jobs:
  - job: InstallControllers
    displayName: Install CRD's
    steps:
    - task: Kubernetes@1
      displayName: Fetch kubeconfig
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'ASO-AKS'
        namespace: 'azureoperator-system'
        command: 'login'
        checkLatest: true
    - bash: make install
  - job:
    displayName: Deploy charts
    steps:
    - task: HelmInstaller@1
      displayName: Install latest Helm
      inputs:
        helmVersionToInstall: 'latest'
    - script: |
       helm package charts/azure-service-operator -d ./charts
       helm repo index charts
    - task: KubernetesManifest@0
      displayName: Bake manifests
      name: bake
      inputs:
        action: bake
        helmChart: charts/azure-service-operator-0.1.0.tgz
        overrides: |
          image.repository:$(containerRegistry)/$(imageRepository)
    - task: KubernetesManifest@0
      displayName: Helm deploy
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'ASO-AKS'
        namespace: 'azureoperator-system'
        manifests: '$(bake.manifestsBundle)'

- stage: Test
  jobs:
  - job:
    displayName: Run integration tests
    steps:
    - task: Kubernetes@1
      displayName: Fetch kubeconfig
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'ASO-AKS'
        namespace: 'azureoperator-system'
        command: 'login'
        checkLatest: true

    - bash: |
        set -x
        go env
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C $(go env GOPATH)/bin
        mv $(go env GOPATH)/bin/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder

        export PATH=$PATH:/usr/local/kubebuilder/bin
        echo '##vso[task.prependpath]/usr/local/kubebuilder/bin'

        make install-test-dependencies
      displayName: Install kubebuilder and test dependencies

    - bash: |
        export PATH=$PATH:$(go env GOPATH)/bin

        make install-test-dependencies
        make test-integration-controllers
      displayName: Test Controllers
      continueOnError: true
      env:
        AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
        AZURE_CLIENT_SECRET: $(AZURE_SP_SECRET)
        AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
        AZURE_OPERATOR_KEYVAULT: $(AZURE_OPERATOR_KEYVAULT)
        AZURE_TENANT_ID: $(AZURE_TENANT_ID)
        BUILD_ID: $(Build.BuildId)

    # The manager tests have been disabled as their addition casues the build pipeline to time out on a single hosted node
    # It can be re-enabled once tests are run in parallel or more than 1 hour of execution time is permitted for the suite
    # - bash: |
    #     export PATH=$PATH:$(go env GOPATH)/bin
    #     make install-test-dependencies

    #     make test-integration-managers
    #   displayName: Test Managers
    #   continueOnError: true
    #   env:
    #     AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    #     AZURE_CLIENT_SECRET: $(AZURE_SP_SECRET)
    #     AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
    #     AZURE_OPERATOR_KEYVAULT: $(AZURE_OPERATOR_KEYVAULT)
    #     AZURE_TENANT_ID: $(AZURE_TENANT_ID)
    #     BUILD_ID: $(Build.BuildId)

    - bash: |
        export PATH=$PATH:$(go env GOPATH)/bin

        make test-process-coverage
      displayName: Render Coverage Reports
      continueOnError: true
      workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: PublishTestResults@2
      inputs:
        testRunner: JUnit
        testResultsFiles: $(System.DefaultWorkingDirectory)/reports/*-report.xml
      
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura 
        summaryFileLocation: $(System.DefaultWorkingDirectory)/reports/merged-coverage.xml
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(System.DefaultWorkingDirectory)/reports'
        artifactName: reports

- stage: Cleanup
  jobs:
  - job: ResourceCleanup
    continueOnError: true
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'tpark-jananiv-azureserviceoperators(4ef44fef-c51d-4d7c-a6ff-8635c02848b1)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'make test-cleanup-azure-resources'
